import random, argparse, sys

parser = argparse.ArgumentParser(description='Generate random restricted subsets of Python code')
parser.add_argument('--file', help='The name of the test to write out to.')
parser.add_argument('--size', type=int, default=10, help='Size of the python program to generate')
parser.add_argument('--maxdepth', default=15, type=int, help='Size of the python program to generate')

args = parser.parse_args()

constants = ['value_0']
output = """# Test generated by FuzzyBear.
value_0=285
"""

range_upper_bound = 1001

def newConstant():
    name = "value_" + str(len(constants))
    value = name + "=" + newTerm(args.maxdepth)
    constants.append(name)
    return value

def newTerm(depth):
    val = random.randrange(0, 13)
    if depth == 0:
        return constants[random.randrange(0, len(constants))]
    if val in range(0, 4):
        return "-(" + newTerm(depth-1) + ")"
    elif val in range(4, 8):
        return "(" + newTerm(depth-1) + ") + (" + newTerm(depth-1) + ")"
    elif val in range(8, 10):
        return constants[random.randrange(0, len(constants))]
    elif val in range(10, 12):
        return str(random.randrange(0, range_upper_bound))
    elif val in range(12, 13):
        return "input()"

def doPrint():
    return "print " + newTerm(args.maxdepth)

for i in range(args.size):
    mode = random.randrange(0, 2)
    if mode == 0:
        output += newConstant() + "\n"
    elif mode == 1:
        output += "print " + newTerm(args.maxdepth) + "\n"

# Generate random input data
num_inputs = output.count("input()")
input_data = "\n".join([str(random.randrange(0, range_upper_bound)) for _ in range(0, num_inputs)])

if args.file:
    with open(args.testname + ".py", 'w') as out_py:
        out_py.write(output)

    with open(args.testname + ".in", 'w') as out_test:
        out_test.write(input_data)

else:
    print "Python:"
    print output
    print "Input Data:"
    print input_data
